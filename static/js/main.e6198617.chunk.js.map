{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handelChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","responde","json","users","this","filteredMonsters","filter","monter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,mBACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCJCC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNtBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCiCxEG,G,wDA9Bb,aAAe,IAAD,8BACZ,gBAYFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAa,IAJH,E,qDAQd,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAK1C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAAC,GAAM,OAAIA,EAAOzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAClG,OACE,sBAAK/B,UAAU,MAAf,UACA,oDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAce,KAAKf,eAC3D,cAAC,EAAD,CAAUJ,SAAUoB,W,GAxBRK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e6198617.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?size=180x180`} />\r\n            <h2> {props.monster.name} </h2>\r\n            <p> {props.monster.email} </p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map(monster => \r\n                <Card key={monster.id} monster={monster} />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handelChange }) => {\r\n    return <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handelChange}/>\r\n}","import React, { Component } from 'react';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SearchBox } from './component/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters:[],\n      searchField: ''\n    }\n    // this.handelChange = this.handelChange.bind(this); // not needed for arrow functions \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(responde => responde.json())\n    .then(users => this.setState({monsters: users}));\n  }\n  handelChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monter => monter.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox placeholder='Search monster' handelChange={this.handelChange}/>\n      <CardList monsters={filteredMonsters} />          \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}